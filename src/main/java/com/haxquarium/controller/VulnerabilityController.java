package com.haxquarium.controller;

import com.haxquarium.model.User;
import com.haxquarium.model.VulnerabilityFlag;
import com.haxquarium.service.UserService;
import com.haxquarium.service.VulnerabilityService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Controller for vulnerability-related operations.
 */
@Controller
@RequestMapping("/vulnerabilities")
@RequiredArgsConstructor
public class VulnerabilityController {

    private final VulnerabilityService vulnerabilityService;
    private final UserService userService;
    
    /**
     * Display the vulnerability dashboard.
     * 
     * @param model The model to add attributes to
     * @return The name of the view to render
     */
    @GetMapping
    public String dashboard(Model model) {
        List<VulnerabilityFlag> vulnerabilities = vulnerabilityService.findAll();
        model.addAttribute("vulnerabilities", vulnerabilities);
        return "vulnerabilities/dashboard";
    }
    
    /**
     * Display vulnerabilities by category.
     * 
     * @param category The category to filter by
     * @param model The model to add attributes to
     * @return The name of the view to render
     */
    @GetMapping("/category/{category}")
    public String byCategory(@PathVariable String category, Model model) {
        List<VulnerabilityFlag> vulnerabilities = vulnerabilityService.findByOwaspCategory(category);
        model.addAttribute("vulnerabilities", vulnerabilities);
        model.addAttribute("category", category);
        return "vulnerabilities/by-category";
    }
    
    /**
     * Display a single vulnerability.
     * 
     * @param id The ID of the vulnerability
     * @param model The model to add attributes to
     * @return The name of the view to render
     */
    @GetMapping("/{id}")
    public String viewVulnerability(@PathVariable Long id, Model model) {
        VulnerabilityFlag vulnerability = vulnerabilityService.findById(id)
                .orElseThrow(() -> new IllegalArgumentException("Invalid vulnerability ID: " + id));
        
        model.addAttribute("vulnerability", vulnerability);
        return "vulnerabilities/view";
    }
    
    /**
     * Submit a flag.
     * 
     * @param flagUuid The flag UUID to submit
     * @param authentication The authentication object
     * @return A response entity with the result
     */
    @PostMapping("/submit-flag")
    @ResponseBody
    public ResponseEntity<Map<String, Object>> submitFlag(@RequestParam String flagUuid, Authentication authentication) {
        Map<String, Object> response = new HashMap<>();
        
        try {
            User user = userService.findByUsername(authentication.getName())
                    .orElseThrow(() -> new IllegalArgumentException("User not found"));
            
            VulnerabilityFlag flag = vulnerabilityService.validateFlag(user.getId(), flagUuid);
            
            response.put("success", true);
            response.put("message", "Congratulations! You have successfully exploited the " + flag.getVulnerabilityName() + " vulnerability.");
            response.put("points", flag.getPoints());
            response.put("vulnerability", flag);
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "Invalid flag: " + e.getMessage());
            
            return ResponseEntity.badRequest().body(response);
        }
    }
    
    /**
     * Display the learning resources.
     * 
     * @param model The model to add attributes to
     * @return The name of the view to render
     */
    @GetMapping("/learn")
    public String learnResources(Model model) {
        List<VulnerabilityFlag> vulnerabilities = vulnerabilityService.findAll();
        model.addAttribute("vulnerabilities", vulnerabilities);
        return "vulnerabilities/learn";
    }
    
    /**
     * Display learning resources for a specific vulnerability.
     * 
     * @param id The ID of the vulnerability
     * @param model The model to add attributes to
     * @return The name of the view to render
     */
    @GetMapping("/learn/{id}")
    public String learnVulnerability(@PathVariable Long id, Model model) {
        VulnerabilityFlag vulnerability = vulnerabilityService.findById(id)
                .orElseThrow(() -> new IllegalArgumentException("Invalid vulnerability ID: " + id));
        
        model.addAttribute("vulnerability", vulnerability);
        return "vulnerabilities/learn-details";
    }
}
