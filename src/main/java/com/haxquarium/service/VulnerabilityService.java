package com.haxquarium.service;

import com.haxquarium.model.User;
import com.haxquarium.model.VulnerabilityFlag;
import com.haxquarium.repository.UserRepository;
import com.haxquarium.repository.VulnerabilityFlagRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;

/**
 * Service for managing vulnerability flags.
 */
@Service
@RequiredArgsConstructor
public class VulnerabilityService {

    private final VulnerabilityFlagRepository vulnerabilityFlagRepository;
    private final UserRepository userRepository;
    private final UserService userService;
    
    /**
     * Find all vulnerability flags.
     * 
     * @return A list of all vulnerability flags
     */
    public List<VulnerabilityFlag> findAll() {
        return vulnerabilityFlagRepository.findAll();
    }
    
    /**
     * Find a vulnerability flag by ID.
     * 
     * @param id The ID to search for
     * @return An Optional containing the vulnerability flag if found
     */
    public Optional<VulnerabilityFlag> findById(Long id) {
        return vulnerabilityFlagRepository.findById(id);
    }
    
    /**
     * Find vulnerability flags by OWASP category.
     * 
     * @param owaspCategory The OWASP category to search for
     * @return A list of vulnerability flags in the given category
     */
    public List<VulnerabilityFlag> findByOwaspCategory(String owaspCategory) {
        return vulnerabilityFlagRepository.findByOwaspCategory(owaspCategory);
    }
    
    /**
     * Find vulnerability flags by difficulty.
     * 
     * @param difficulty The difficulty to search for
     * @return A list of vulnerability flags with the given difficulty
     */
    public List<VulnerabilityFlag> findByDifficulty(VulnerabilityFlag.Difficulty difficulty) {
        return vulnerabilityFlagRepository.findByDifficulty(difficulty);
    }
    
    /**
     * Find a vulnerability flag by flag UUID.
     * 
     * @param flagUuid The flag UUID to search for
     * @return An Optional containing the vulnerability flag if found
     */
    public Optional<VulnerabilityFlag> findByFlagUuid(String flagUuid) {
        return vulnerabilityFlagRepository.findByFlagUuid(flagUuid);
    }
    
    /**
     * Find a vulnerability flag by vulnerability name.
     * 
     * @param vulnerabilityName The vulnerability name to search for
     * @return An Optional containing the vulnerability flag if found
     */
    public Optional<VulnerabilityFlag> findByVulnerabilityName(String vulnerabilityName) {
        return vulnerabilityFlagRepository.findByVulnerabilityName(vulnerabilityName);
    }
    
    /**
     * Validate a flag and award points to the user if valid.
     * 
     * @param userId The ID of the user
     * @param flagUuid The flag UUID to validate
     * @return The vulnerability flag if valid
     */
    @Transactional
    public VulnerabilityFlag validateFlag(Long userId, String flagUuid) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new IllegalArgumentException("User not found"));
        
        VulnerabilityFlag flag = vulnerabilityFlagRepository.findByFlagUuid(flagUuid)
                .orElseThrow(() -> new IllegalArgumentException("Invalid flag"));
        
        // Award points to the user
        userService.addPoints(userId, flag.getPoints());
        
        return flag;
    }
    
    /**
     * Save a vulnerability flag.
     * 
     * @param vulnerabilityFlag The vulnerability flag to save
     * @return The saved vulnerability flag
     */
    @Transactional
    public VulnerabilityFlag save(VulnerabilityFlag vulnerabilityFlag) {
        return vulnerabilityFlagRepository.save(vulnerabilityFlag);
    }
    
    /**
     * Delete a vulnerability flag.
     * 
     * @param id The ID of the vulnerability flag to delete
     */
    @Transactional
    public void delete(Long id) {
        vulnerabilityFlagRepository.deleteById(id);
    }
}
